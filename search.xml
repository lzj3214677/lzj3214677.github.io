<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>多线程WEB服务器设计</title>
      <link href="/2248986101.html"/>
      <url>/2248986101.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>要求基于运输层或其下层协议进行开发，而不能直接调用高级语言封装好的协议库或插件等。</p><p>设计目的：<br />设计并实现一个 WEB 服务器，可并行服务处理多个请求。</p><p>设计要求：<br /> 在后台运行服务器程序。<br /> 使用 Socket API 或 WinPcap 技术。<br /> 主线程监听客户机的连接建立请求，为每次请求/响应创建一个单独的TCP 连接，一个单独的线程将处理这些连接。<br /> 用浏览器打开，显示请求页面内容即可；如有差错，则显示出错信息。</p><h2 id="1网络接口编程原理"><a class="markdownIt-Anchor" href="#1网络接口编程原理"></a> 1.网络接口编程原理</h2><p>网络协议栈的应用层有很多针对不同应用的协议，如 HTTP、FTP、SMTP 等等。每一种应用层协议都规定了应用程序之间进行数据交换所遵循的规则。基于某种应用层的协议，可以有不同的网络应用程序。比如我们日常使用的浏览新闻的浏览器，有的用户习惯Google 浏览器，有的喜欢火狐浏览器，还有的就使用 Windows 操作系统自带的 IE 浏览器，这些浏览器都是基于应用层协议HTTP/ HTTPS（超文本传输协议/安全的超文本传输协议）开发的网络应用程序。HTTP/HTTPS 规定了用户的客户机和提供 WEB 服务的服务器之间的网络通信规则，只要遵循该规则，不管是什么语言开发、什么界面，只要是能提供用户使用 WEB 服务，就完成了网络应用程序的功能。</p><h3 id="11网络协议"><a class="markdownIt-Anchor" href="#11网络协议"></a> 1.1网络协议</h3><p>网络协议栈的 5 层模型，从下向上为：物理层、数据链路层、网络层、传输层和应用层，每层都有对应层的网络协议负责同层的通信功能；上层协议使用下层协议实现的服务来完成本层协议功能，即层与层之间使用通过服务来连接。</p><p><img src="C:%5CUsers%5C%E5%BB%96%E5%BF%97%E4%BD%B3%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1680697021389.png" alt="1680697021389" /></p><p>封装</p><p>解封</p><p>网络传输数据分组组成：</p><p><img src="C:%5CUsers%5C%E5%BB%96%E5%BF%97%E4%BD%B3%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1680699235369.png" alt="1680699235369" /></p><p><img src="C:%5CUsers%5C%E5%BB%96%E5%BF%97%E4%BD%B3%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1680699256544.png" alt="1680699256544" /></p><h4 id="111网络程序体系结构"><a class="markdownIt-Anchor" href="#111网络程序体系结构"></a> 1.1.1网络程序体系结构</h4><p>C/S（客户服务器结构）工作流程：</p><p>P2P（对等结构）工作流程：</p><h3 id="12套接字网络编程接口"><a class="markdownIt-Anchor" href="#12套接字网络编程接口"></a> 1.2套接字——网络编程接口</h3><p>套接字编程接口：如 Windows Socket 和 Linux Socket，操作系统提供了对套接字进行操作的一组编程接口（API），应用程序使用这些 API 函数，可以构造套接字，安装绑定套接字，连接套接字，通过套接字交换数据，关闭套接字，在此基础上实现各种网络应用程序。</p><h2 id="2pcap网络编程技术"><a class="markdownIt-Anchor" href="#2pcap网络编程技术"></a> 2.Pcap网络编程技术</h2><h3 id="21winpcap概述"><a class="markdownIt-Anchor" href="#21winpcap概述"></a> 2.1Winpcap概述</h3><h4 id="211winpcap资料下载"><a class="markdownIt-Anchor" href="#211winpcap资料下载"></a> 2.1.1Winpcap资料下载</h4><h4 id="212winpcap环境配置"><a class="markdownIt-Anchor" href="#212winpcap环境配置"></a> 2.1.2Winpcap环境配置</h4><p>vs环境配置</p><h3 id="22winpcap编程"><a class="markdownIt-Anchor" href="#22winpcap编程"></a> 2.2Winpcap编程</h3><h4 id="221winpcap开发流程"><a class="markdownIt-Anchor" href="#221winpcap开发流程"></a> 2.2.1Winpcap开发流程</h4><p>Winpcap开发网络应用程序的流程大致一样：首先是获取主机安装的网络设备列表–选择并激活某个网络设备–封装数据包/过滤数据包–发送数据包/解析数据包。如下图所示：</p><p><img src="C:%5CUsers%5C%E5%BB%96%E5%BF%97%E4%BD%B3%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1680701409157.png" alt="1680701409157" /></p><h4 id="222winpcap基本网络编程函数"><a class="markdownIt-Anchor" href="#222winpcap基本网络编程函数"></a> 2.2.2Winpcap基本网络编程函数</h4><ul><li>获取设备列表pcap_findalldevs()</li><li>打开选择的适配器pcap_open_live()</li><li>关闭适配器pcap_close()</li><li>捕获数据包<ul><li>直接捕获数据包方式</li><li>回调方式捕获数据包</li></ul></li><li>过滤数据包<ul><li>pcap_compile( )</li><li>pcap_setfilter( )</li></ul></li><li>发送数据包<ul><li>发送单个数据包 pcap_sendpacket（）</li><li>发送队列连续发送数据包send_queue( )</li></ul></li></ul><h2 id="3socket网络编程技术"><a class="markdownIt-Anchor" href="#3socket网络编程技术"></a> 3.Socket网络编程技术</h2><h3 id="31winsock概述"><a class="markdownIt-Anchor" href="#31winsock概述"></a> 3.1WinSock概述</h3><p>在使用套接字函数前，用户需要引用 Winsock2.h 头文件，并链接 Ws2_32.lib 库文件。在代码前加入下面两行代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;winsock2.h&quot;</span> <span class="comment">//引用头文件</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment (lib,<span class="string">&quot;ws2_32.lib&quot;</span>) <span class="comment">//链接库文件</span></span></span><br></pre></td></tr></table></figure><h4 id="311winsock-的初始化和终止"><a class="markdownIt-Anchor" href="#311winsock-的初始化和终止"></a> 3.1.1WinSock 的初始化和终止</h4><p>WinSock 应用程序通过初始化函数 WSAStartup（）来初始化 WinSock 库，在程序结束时，使用终止函数 WSAClieanup（）释放系统资源。</p><h4 id="312创建和释放套接字"><a class="markdownIt-Anchor" href="#312创建和释放套接字"></a> 3.1.2创建和释放套接字</h4><ul><li>创建套接字socket()</li><li>关闭套接字closesocket()</li></ul><h3 id="32winsock-编程"><a class="markdownIt-Anchor" href="#32winsock-编程"></a> 3.2WinSock 编程</h3><h4 id="321winsock开发流程"><a class="markdownIt-Anchor" href="#321winsock开发流程"></a> 3.2.1WinSock开发流程</h4><h4 id="322-winsock-基本函数"><a class="markdownIt-Anchor" href="#322-winsock-基本函数"></a> 3.2.2 WinSock 基本函数</h4><ul><li>绑定本地地址——bind( )</li><li>请求连接——connect( )</li><li>服务器监听连接——listen()</li><li>接收连接请求——accept( )</li><li>发送数据——send( )</li><li>接收数据——recv( )</li><li>按照指定目的地向数据报套接字发送数据——sendto( )</li><li>从数据报套接字接收数据——recvfrom( )</li><li>停止数据传输——shutdown( )</li></ul><h4 id="323-winsock-的-io-模型"><a class="markdownIt-Anchor" href="#323-winsock-的-io-模型"></a> 3.2.3 WinSock 的 I/O 模型</h4><ul><li>阻塞 I/O 模型</li><li>就绪通告 I/O 模型</li><li>重叠 I/O 模型</li></ul><h4 id="324-winsock-辅助函数"><a class="markdownIt-Anchor" href="#324-winsock-辅助函数"></a> 3.2.4 WinSock 辅助函数</h4><ul><li>字节顺序转换函数</li><li>IP 地址转换函数</li><li>套接口信息查询函数</li><li>WinSock 错误处理函数</li></ul><h2 id="4源码"><a class="markdownIt-Anchor" href="#4源码"></a> 4.源码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//#include &quot;pch.h&quot;</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;winsock2.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;regex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(lib,<span class="string">&quot;Ws2_32.lib&quot;</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">serverclient</span><span class="params">(SOCKET talksocket)</span></span>;</span><br><span class="line"><span class="function">std::string <span class="title">fileposition</span><span class="params">(<span class="string">&quot;C:\\Users\\廖志佳\\Desktop\\Project1&quot;</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span> </span>&#123;</span><br><span class="line"><span class="comment">//初始化winsock</span></span><br><span class="line">WSADATA wasdata;</span><br><span class="line"><span class="type">int</span> re = <span class="built_in">WSAStartup</span>(<span class="number">0x0202</span>, &amp;wasdata);<span class="comment">//返回值，如果成功，则WSAStartup函数将返回零；否则，返回错误代码</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (re) &#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;WSAstartup error\n&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;WSAstartup success\n&quot;</span>;</span><br><span class="line"><span class="keyword">if</span> (wasdata.wVersion != <span class="number">0x0202</span>) &#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;Version error\n&quot;</span>;</span><br><span class="line"><span class="built_in">WSACleanup</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;Version pass\n&quot;</span>;</span><br><span class="line"><span class="comment">//创建一个监听socket</span></span><br><span class="line">SOCKET tcpsocket;<span class="comment">//服务器监听socket</span></span><br><span class="line">tcpsocket = <span class="built_in">socket</span>(AF_INET, SOCK_STREAM, IPPROTO_TCP);</span><br><span class="line"><span class="comment">//AF_INET是IPv4的Internet地址族格式，</span></span><br><span class="line"><span class="comment">//SOCK_STREAM类型可将传输控制协议（TCP）用于Internet地址系列，</span></span><br><span class="line"><span class="comment">//IPPROTO_TCP表示传输控制协议（TCP）。</span></span><br><span class="line"><span class="keyword">if</span> (tcpsocket == INVALID_SOCKET) &#123;<span class="comment">//如果创建失败返回INVALID_SOCKET值</span></span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;Get socket error\n&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;get correct socket\n&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//bind 绑定socket</span></span><br><span class="line">sockaddr_in addr;</span><br><span class="line">addr.sin_family = AF_INET;</span><br><span class="line">addr.sin_port = <span class="built_in">htons</span>(<span class="number">80</span>);</span><br><span class="line">addr.sin_addr.S_un.S_addr = <span class="built_in">htonl</span>(INADDR_ANY);</span><br><span class="line"><span class="built_in">bind</span>(tcpsocket, (LPSOCKADDR)&amp;addr, <span class="built_in">sizeof</span>(addr));</span><br><span class="line"></span><br><span class="line"><span class="comment">//监听socket，等待客户机的连接请求</span></span><br><span class="line">re = <span class="built_in">listen</span>(tcpsocket, <span class="number">100</span>);<span class="comment">//最多接收100个连接</span></span><br><span class="line"><span class="keyword">if</span> (re == SOCKET_ERROR) &#123;<span class="comment">//如果不成功，返回SOCKET_ERROR的值，</span></span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;listen error\n&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;listen correct\n&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//accept接收客户机请求 连接并生成会话socket</span></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> sockerror;</span><br><span class="line"><span class="type">int</span> length = <span class="built_in">sizeof</span>(sockaddr);</span><br><span class="line">sockaddr_in clientaddr;</span><br><span class="line">SOCKET talksocket = <span class="built_in">accept</span>(tcpsocket, (sockaddr*)&amp;clientaddr, &amp;length);</span><br><span class="line"><span class="keyword">if</span> (talksocket == INVALID_SOCKET) &#123;<span class="comment">//如果接收不成功，将返回INVALID_SOCKET的值</span></span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;accept error\n&quot;</span>;</span><br><span class="line">sockerror = <span class="built_in">WSAGetLastError</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;accept success\n&quot;</span>;</span><br><span class="line"><span class="function">std::thread <span class="title">talkthread</span><span class="params">(serverclient, talksocket)</span></span>;<span class="comment">//开启一个新的线程来处理这一个客户的请求</span></span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;request IP:&quot;</span> &lt;&lt; (<span class="type">int</span>)clientaddr.sin_addr.S_un.S_un_b.s_b1 &lt;&lt; <span class="string">&quot;.&quot;</span> &lt;&lt; (<span class="type">int</span>)clientaddr.sin_addr.S_un.S_un_b.s_b2 &lt;&lt; <span class="string">&quot;.&quot;</span> &lt;&lt; (<span class="type">int</span>)clientaddr.sin_addr.S_un.S_un_b.s_b3 &lt;&lt; <span class="string">&quot;.&quot;</span> &lt;&lt; (<span class="type">int</span>)clientaddr.sin_addr.S_un.S_un_b.s_b4;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;\nrequest Port:&quot;</span> &lt;&lt; clientaddr.sin_port &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">talkthread.<span class="built_in">detach</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">serverclient</span><span class="params">(SOCKET talksocket)</span> </span>&#123;<span class="comment">//进行会话的函数。</span></span><br><span class="line"><span class="type">int</span> sendre;</span><br><span class="line"><span class="type">char</span>* buf = (<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="number">1024</span> * <span class="built_in">sizeof</span>(<span class="type">char</span>));</span><br><span class="line"><span class="type">int</span> len = <span class="number">1024</span>;</span><br><span class="line"><span class="type">int</span> recharnum;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* NOTFOUND = <span class="string">&quot;HTTP/1.1 404 Not Found\r\n&quot;</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* REQERROR = <span class="string">&quot;HTTP/1.1 400 Bad Request\r\n&quot;</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* FORMERROR = <span class="string">&quot;HTTP/1.1 400 Bad Request\r\n&quot;</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* LOADERROR = <span class="string">&quot;HTTP/1.1 400 Bad Request\r\n&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//接收数据</span></span><br><span class="line">recharnum = <span class="built_in">recv</span>(talksocket, buf, len, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (recharnum == SOCKET_ERROR) &#123;</span><br><span class="line">recharnum = <span class="built_in">WSAGetLastError</span>();</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;thread falied!&quot;</span>;</span><br><span class="line">std::cout &lt;&lt; std::endl;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//对接受到的消息进行解析</span></span><br><span class="line">std::smatch strmatch;<span class="comment">//正则表达式结果文本</span></span><br><span class="line"><span class="function">std::regex <span class="title">regulation</span><span class="params">(<span class="string">&quot;([A-Za-z]+) +(.*) +(HTTP/[0-9][.][0-9])&quot;</span>)</span></span>;<span class="comment">//正则表达式规则，，匹配请求报文的请求行</span></span><br><span class="line"><span class="function">std::string <span class="title">str</span><span class="params">(buf)</span></span>;<span class="comment">//需要用正则表达式的原始文本</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> matchnum = std::<span class="built_in">regex_search</span>(str, strmatch, regulation);</span><br><span class="line"><span class="keyword">if</span> (matchnum == <span class="number">0</span>) &#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;request message exception\n&quot;</span>;</span><br><span class="line">sendre = <span class="built_in">send</span>(talksocket, REQERROR, <span class="built_in">strlen</span>(REQERROR), <span class="number">0</span>);</span><br><span class="line"><span class="built_in">closesocket</span>(talksocket);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;<span class="comment">//分离 GET  url http_version</span></span><br><span class="line">std::string msg_get = strmatch[<span class="number">1</span>];</span><br><span class="line">std::string msg_url = strmatch[<span class="number">2</span>];</span><br><span class="line">std::smatch filetype;</span><br><span class="line"><span class="function">std::regex <span class="title">regulation2</span><span class="params">(<span class="string">&quot;\\..*&quot;</span>)</span></span>;</span><br><span class="line">matchnum = <span class="built_in">regex_search</span>(msg_url, filetype, regulation2);</span><br><span class="line"><span class="keyword">if</span> (matchnum == <span class="number">0</span>) &#123;</span><br><span class="line">std::cout &lt;&lt; msg_get + msg_url + <span class="string">&quot;FORMAT ERROR\n&quot;</span>;</span><br><span class="line">sendre = <span class="built_in">send</span>(talksocket, FORMERROR, <span class="built_in">strlen</span>(FORMERROR), <span class="number">0</span>);</span><br><span class="line"><span class="built_in">closesocket</span>(talksocket);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">std::ifstream <span class="built_in">f</span>(fileposition + msg_url, std::ios::binary);</span><br><span class="line"><span class="keyword">if</span> (!f) &#123;<span class="comment">//没有找到文件</span></span><br><span class="line">std::cout &lt;&lt; msg_url + <span class="string">&quot;NOT FOUND&quot;</span>;</span><br><span class="line"><span class="comment">//sendre=send(talksocket, NOTFOUND, strlen(NOTFOUND),0);</span></span><br><span class="line"><span class="function">std::ifstream <span class="title">f</span><span class="params">(fileposition + <span class="string">&quot;404.html&quot;</span>, std::ios::binary)</span></span>;</span><br><span class="line"><span class="keyword">goto</span> sendfile;</span><br><span class="line"><span class="built_in">closesocket</span>(talksocket);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;<span class="comment">//如果找到了对应的文件</span></span><br><span class="line">sendfile:</span><br><span class="line">std::filebuf* tmp = f.<span class="built_in">rdbuf</span>();</span><br><span class="line"><span class="type">int</span> size = tmp-&gt;<span class="built_in">pubseekoff</span>(<span class="number">0</span>, f.end, f.in);</span><br><span class="line">tmp-&gt;<span class="built_in">pubseekpos</span>(<span class="number">0</span>, f.in);</span><br><span class="line"><span class="keyword">if</span> (size &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;load file into memory failed!\n&quot;</span>;</span><br><span class="line">sendre = <span class="built_in">send</span>(talksocket, LOADERROR, <span class="built_in">strlen</span>(LOADERROR), <span class="number">0</span>);</span><br><span class="line"><span class="built_in">closesocket</span>(talksocket);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">std::string Content_Type = <span class="string">&quot;image/jpg&quot;</span>;</span><br><span class="line"><span class="type">char</span>* buffer = <span class="keyword">new</span> <span class="type">char</span>[size];</span><br><span class="line"><span class="type">char</span>* tail = buffer + size;</span><br><span class="line">tmp-&gt;<span class="built_in">sgetn</span>(buffer, size);</span><br><span class="line">f.<span class="built_in">close</span>();</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;success return file &quot;</span> + msg_url;</span><br><span class="line">std::cout &lt;&lt; std::endl;</span><br><span class="line">std::stringstream remsg;</span><br><span class="line">remsg &lt;&lt; <span class="string">&quot;HTTP/1.1 200 OK\r\n&quot;</span> &lt;&lt; <span class="string">&quot;Connection:close\r\n&quot;</span> &lt;&lt; <span class="string">&quot;Server:Macyrate\r\n&quot;</span> &lt;&lt; <span class="string">&quot;Content Length:&quot;</span> &lt;&lt; size</span><br><span class="line">&lt;&lt; <span class="string">&quot;\r\n&quot;</span> &lt;&lt; <span class="string">&quot;Content Type:&quot;</span> + Content_Type &lt;&lt; <span class="string">&quot;\r\n\r\n&quot;</span>;</span><br><span class="line">std::string remsgstr = remsg.<span class="built_in">str</span>();</span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* remsgchar = remsgstr.<span class="built_in">c_str</span>();</span><br><span class="line"><span class="type">int</span> tmpsize = <span class="built_in">strlen</span>(remsgchar);</span><br><span class="line">sendre = <span class="built_in">send</span>(talksocket, remsgchar, tmpsize, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">while</span> (buffer &lt; tail) &#123;</span><br><span class="line">sendre = <span class="built_in">send</span>(talksocket, buffer, size, <span class="number">0</span>);</span><br><span class="line">buffer = buffer + sendre;</span><br><span class="line">size = size - sendre;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">closesocket</span>(talksocket);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>整个Web服务器设计可分为以下几个部分：</p><ol><li>初始化Windows Socket，为TCP连接的建立做准备</li></ol><p>①加载Windows Socket；</p><p>②创建套接字；</p><p>③根据服务器端的相关IP地址和端口号信息，进行套接字绑定。</p><ol start="2"><li>启动监听，接受客户端请求建立TCP连接，接收HTTP请求报文</li></ol><p>①Web服务器启动监听；</p><p>②接收来自客户端的连接请求，建立TCP连接；</p><p>③接收来自客户端的TCP传输数据，即HTTP请求报文。</p><ol start="3"><li>处理HTTP请求报文并做出响应</li></ol><p>①处理HTTP请求报文的请求行；</p><p>②判断处理“请求方法”，根据判断处理的结果，构造相应的响应报文，反馈相关给客户端，并且在服务器端打印反馈的结果；</p><p>③判断处理“URL”，根据判断处理的结果，构造相应的响应报文，反馈相关给客户端，并且在服务器端打印反馈的结果；</p><ol start="4"><li>关闭连接及Windows Socket</li></ol><p>①关闭所建立连接的套接字；</p><p>②关闭Windows Socket。</p><p>在server.cpp中，使用winsock库和windows线程池（<thread>库）编程。程序分为两个函数：main函数用于创建socket，建立与客户端的多线程会话连接；serverclient函数用于在会话中实际处理客户端的请求，即根据接收到报文的内容进行正则表达式匹配解析，提取有效信息并提供相应服务。</p>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>鸢尾花分类</title>
      <link href="/500443968.html"/>
      <url>/500443968.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="row">    <embed src="./local_file/鸢尾花分类.pdf" width="100%" height="550" type="application/pdf"></div>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>预测房价</title>
      <link href="/1299758958.html"/>
      <url>/1299758958.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="row">    <embed src="./local_file/预测房价.pdf" width="100%" height="550" type="application/pdf"></div>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>股票数据分析</title>
      <link href="/217865476.html"/>
      <url>/217865476.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="row">    <embed src="./local_file/股票数据分析.pdf" width="100%" height="550" type="application/pdf"></div>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据分析 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
